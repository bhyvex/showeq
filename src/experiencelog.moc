/****************************************************************************
** Meta object code from reading C++ file 'experiencelog.h'
**
** Created: Thu Feb 19 01:03:14 2009
**      by: The Qt Meta Object Compiler version 59 (Qt 4.4.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "experiencelog.h"
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'experiencelog.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 59
#error "This file was generated using the moc from 4.4.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
static const uint qt_meta_data_ExperienceWindow[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
      15,   10, // methods
       0,    0, // properties
       0,    0, // enums/sets

 // slots: signature, parameters, type, tag, flags
      18,   17,   17,   17, 0x0a,
      30,   17,   17,   17, 0x0a,
      85,   46,   17,   17, 0x0a,
     124,   17,   17,   17, 0x0a,
     142,   17,   17,   17, 0x0a,
     162,   17,   17,   17, 0x0a,
     172,   17,   17,   17, 0x0a,
     188,   17,   17,   17, 0x0a,
     204,   17,   17,   17, 0x0a,
     220,   17,   17,   17, 0x0a,
     232,   17,   17,   17, 0x0a,
     250,   17,   17,   17, 0x0a,
     263,   17,   17,   17, 0x0a,
     280,   17,   17,   17, 0x0a,
     300,   17,   17,   17, 0x0a,

       0        // eod
};

static const char qt_meta_stringdata_ExperienceWindow[] = {
    "ExperienceWindow\0\0savePrefs()\0"
    "updateAverage()\0mob_name,mob_level,xp_gained,zone_name\0"
    "addExpRecord(QString,int,long,QString)\0"
    "viewRatePerHour()\0viewRatePerMinute()\0"
    "viewAll()\0view15Minutes()\0view30Minutes()\0"
    "view60Minutes()\0viewClear()\0"
    "calcZEMNextKill()\0viewZEMraw()\0"
    "viewZEMpercent()\0viewZEMcalculated()\0"
    "clear()\0"
};

const QMetaObject ExperienceWindow::staticMetaObject = {
    { &SEQWindow::staticMetaObject, qt_meta_stringdata_ExperienceWindow,
      qt_meta_data_ExperienceWindow, 0 }
};

const QMetaObject *ExperienceWindow::metaObject() const
{
    return &staticMetaObject;
}

void *ExperienceWindow::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_ExperienceWindow))
        return static_cast<void*>(const_cast< ExperienceWindow*>(this));
    return SEQWindow::qt_metacast(_clname);
}

int ExperienceWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = SEQWindow::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: savePrefs(); break;
        case 1: updateAverage(); break;
        case 2: addExpRecord((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< long(*)>(_a[3])),(*reinterpret_cast< QString(*)>(_a[4]))); break;
        case 3: viewRatePerHour(); break;
        case 4: viewRatePerMinute(); break;
        case 5: viewAll(); break;
        case 6: view15Minutes(); break;
        case 7: view30Minutes(); break;
        case 8: view60Minutes(); break;
        case 9: viewClear(); break;
        case 10: calcZEMNextKill(); break;
        case 11: viewZEMraw(); break;
        case 12: viewZEMpercent(); break;
        case 13: viewZEMcalculated(); break;
        case 14: clear(); break;
        }
        _id -= 15;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
